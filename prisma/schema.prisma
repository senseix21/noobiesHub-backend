generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEVELOPER
  MENTOR
  RECRUITER
}

model User {
  id                     Int                     @id @default(autoincrement())
  username               String?
  profileImg             String?
  email                  String                  @unique
  password               String
  role                   Role                    @default(DEVELOPER)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  mentorshipPrograms     MentorshipProgram[]
  mentorshipApplications MentorshipApplication[]
  recruiters             Recruiter?
  jobApplications        JobApplication[]
  userProfile            UserProfile?
  projects               Project[]
}

model MentorshipProgram {
  id                     Int                     @id @default(autoincrement())
  mentorId               Int
  title                  String
  description            String
  duration               String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  mentor                 User                    @relation(fields: [mentorId], references: [id])
  mentorshipApplications MentorshipApplication[]
}

model MentorshipApplication {
  id                  Int               @id @default(autoincrement())
  userId              Int
  mentorshipProgramId Int
  message             String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id])
  mentorshipProgram   MentorshipProgram @relation(fields: [mentorshipProgramId], references: [id])
}

model Recruiter {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  company     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  jobListings JobListing[]
}

model JobListing {
  id              Int              @id @default(autoincrement())
  recruiterId     Int
  title           String
  description     String
  requiredSkills  String
  location        String
  companyDetails  String
  applicationLink String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  recruiter       Recruiter        @relation(fields: [recruiterId], references: [id])
  jobApplications JobApplication[]
}

model JobApplication {
  id           Int        @id @default(autoincrement())
  userId       Int
  jobListingId Int
  resumeLink   String
  message      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])
}

model UserProfile {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  introduction   String
  education      String
  workExperience String
  skills         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Project {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String
  img         String[]
  gitRepo     String
  liveLink    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
